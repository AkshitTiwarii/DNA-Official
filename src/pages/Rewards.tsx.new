import { useState, useEffect } from 'react';
import { ArrowLeft } from 'lucide-react';
import { Link } from 'react-router-dom';
import Navigation from '@/components/Navigation';
import Footer from '@/components/Footer';
import ScrollToTop from '@/components/ScrollToTop';
import type { Certificate } from '@/data/realCertificates';
import certificates from '@/data/realCertificates';

type FilterType = 'all' | 'certificates' | 'badges' | 'achievements';

const Rewards = () => {
  const [activeFilter, setActiveFilter] = useState<FilterType>('all');
  const [filteredItems, setFilteredItems] = useState<Certificate[]>(certificates);

  useEffect(() => {
    if (activeFilter === 'all') {
      setFilteredItems(certificates);
      return;
    }

    // Remove 's' from the end of the filter value to match the type
    const type = activeFilter.slice(0, -1);
    setFilteredItems(certificates.filter(cert => cert.type === type));
  }, [activeFilter]);

  const filters = [
    { label: 'All', value: 'all' as const },
    { label: 'Certificates', value: 'certificates' as const },
    { label: 'Badges', value: 'badges' as const },
    { label: 'Achievements', value: 'achievements' as const }
  ];

  return (
    <div className="min-h-screen bg-[#0a0a0a]">
      <Navigation />
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Back Navigation */}
        <div className="mb-8">
          <Link 
            to="/" 
            className="inline-flex items-center text-blue-400 hover:text-blue-300 transition-colors group"
          >
            <ArrowLeft className="h-4 w-4 mr-2 group-hover:-translate-x-1 transition-transform" />
            Back to DNA Forge Hub
          </Link>
        </div>

        {/* Header */}
        <div className="text-center mb-16">
          <div className="inline-flex items-center bg-[#111111] border border-gray-800 rounded-lg px-4 py-2 mb-8">
            <div className="w-2 h-2 bg-blue-500 rounded-full mr-3" />
            <span className="text-gray-400 text-sm font-medium tracking-wide">COMMUNITY REWARDS</span>
          </div>
          
          <h1 className="text-5xl md:text-7xl font-bold mb-6 text-white tracking-tight">
            Rewards Gallery
          </h1>
          
          <p className="text-xl text-gray-400 max-w-2xl mx-auto leading-relaxed font-light">
            Showcase of certificates, badges, and achievements earned by our community members.
          </p>
        </div>

        {/* Filters */}
        <div className="flex justify-center gap-4 mb-12">
          {filters.map((filter) => (
            <button
              key={filter.value}
              onClick={() => setActiveFilter(filter.value)}
              className={`px-6 py-2 rounded-full font-medium transition-all duration-300 ${
                activeFilter === filter.value
                  ? 'bg-blue-500 text-white'
                  : 'bg-gray-800 text-gray-400 hover:bg-gray-700'
              }`}
            >
              {filter.label}
            </button>
          ))}
        </div>

        {/* Grid of Certificates */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredItems.map((item, index) => (
            <div
              key={index}
              className="bg-[#111111] border border-gray-800 rounded-xl p-6 hover:border-gray-700 transition-all duration-300"
            >
              <div className="aspect-[3/2] mb-4 overflow-hidden rounded-lg">
                <img
                  src={item.imageUrl}
                  alt={item.name}
                  className="w-full h-full object-cover"
                />
              </div>
              <h3 className="text-lg font-semibold mb-2 text-white">{item.name}</h3>
              <p className="text-gray-400 text-sm">{item.description || 'Certificate of Achievement'}</p>
              <div className="mt-4 flex items-center gap-2">
                <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                  item.type === 'certificate' ? 'bg-green-500/20 text-green-400' :
                  item.type === 'badge' ? 'bg-blue-500/20 text-blue-400' :
                  'bg-purple-500/20 text-purple-400'
                }`}>
                  {item.type.charAt(0).toUpperCase() + item.type.slice(1)}
                </span>
                <span className="text-gray-500 text-xs">{item.date || 'August 2025'}</span>
              </div>
            </div>
          ))}
        </div>

        {/* No Results Message */}
        {filteredItems.length === 0 && (
          <div className="text-center py-12">
            <p className="text-gray-400 text-lg">
              No {activeFilter === 'all' ? 'items' : activeFilter.slice(0, -1) + 's'} found.
            </p>
          </div>
        )}
      </div>
      <Footer />
      <ScrollToTop />
    </div>
  );
};

export default Rewards;
